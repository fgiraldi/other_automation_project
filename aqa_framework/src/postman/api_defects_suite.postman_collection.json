{
	"info": {
		"_postman_id": "1fb9543a-c654-4c63-8c35-91182a9df7d9",
		"name": "PROCTORU API Regression (Defects)",
		"description": "// Creates initial time when request sent\n\nvar moment = require('moment')\nvar time = moment().toISOString();\n\n// Current Time\n\npm.environment.set('currentTime', time);\n\n// Past Time\n\nvar oneMinutePast = moment().subtract(1, \"minute\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneHourPast = moment().subtract(1, \"hour\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneDayPast = moment().subtract(1, \"day\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneWeekPast = moment().subtract(1, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneMonthPast = moment().subtract(1, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneYearPast = moment().subtract(1, \"year\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\n\npm.environment.set('oneMinutePast', oneMinutePast);\npm.environment.set('oneHourPast', oneHourPast);\npm.environment.set('oneDayPast', oneDayPast);\npm.environment.set('oneWeekPast', oneWeekPast);\npm.environment.set('oneMonthPast', oneMonthPast);\npm.environment.set('oneYearPast', oneYearPast);\n\n// Future Time\n\nvar oneMinuteFuture = moment().add(1, \"minute\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneHourFuture = moment().add(1, \"hour\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneDayFuture = moment().add(1, \"day\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneWeekFuture = moment().add(1, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneMonthFuture = moment().add(1, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\nvar oneYearFuture = moment().add(1, \"year\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");\n\npm.environment.set('oneMinuteFuture', oneMinuteFuture);\npm.environment.set('oneHourFuture', oneHourFuture);\npm.environment.set('oneDayFuture', oneDayFuture);\npm.environment.set('oneWeekFuture', oneWeekFuture);\npm.environment.set('oneMonthFuture', oneMonthFuture);\npm.environment.set('oneYearFuture', oneYearFuture);\n\n// Random Numbers\n\nvar randomNumber = 999999;\n\nvar generalNum = Math.floor(Math.random() * randomNumber);\npostman.setEnvironmentVariable(\"generalNumValue\", generalNum);\n\n// var termID = Math.floor(Math.random() * randomNumber);\n// postman.setEnvironmentVariable(\"termID\", termID);\n\n// var studentID = Math.floor(Math.random() * randomNumber);\n// postman.setEnvironmentVariable(\"studentID\", studentID);\n\n// var userID = \"lucas_skywalker\"\n// postman.setEnvironmentVariable(\"userID\", 1062171492);\n\n//var password = Math.floor(Math.random() * randomNumber);\n//postman.setEnvironmentVariable(\"password\", password);\n\n//var email = userID + \"@starwars.com\";\n//postman.setEnvironmentVariable(\"email\", email);\n\n// var phone1 =  Math.floor(Math.random() * randomNumber * 1000000);\n// postman.setEnvironmentVariable(\"phone1\", phone1);\n\n// var phone2 =  Math.floor(Math.random() * randomNumber * 1000000);\n// postman.setEnvironmentVariable(\"phone2\", phone2);\n\n// var phone3 =  Math.floor(Math.random() * randomNumber * 1000000);\n// postman.setEnvironmentVariable(\"phone3\", phone3);\n\n//var flagNotes =  \"Test-taker should get double time on their exam.\";\n//postman.setEnvironmentVariable(\"flagNotes\", flagNotes);\n\n//postman.setEnvironmentVariable(\"userPassword\", 'mtfbwya1337');\n// var randomNumber = 1000;\n// var time = new Date().toISOString();\n// postman.setEnvironmentVariable(\"currentTime\", time);\n\n// var startDate = \"2014-08-29T00:00:00Z\";\n// postman.setEnvironmentVariable(\"startDate\", startDate);\n\n// var endDate = \"2019-08-29T00:00:00Z\";\n// postman.setEnvironmentVariable(\"endDate\", endDate);\n\n// var examID = Math.floor(Math.random() * randomNumber);\n// postman.setEnvironmentVariable(\"examID\", examID);\n\n// var courseID = Math.floor(Math.random() * randomNumber);\n// postman.setEnvironmentVariable(\"courseID\", courseID);\n\n// var termName = \"Term \" + Math.floor(Math.random() * randomNumber);\n// postman.setEnvironmentVariable(\"termName\", termName);\n\n// var description = \"This is a description \" + Math.floor(Math.random() * randomNumber);\n// postman.setEnvironmentVariable(\"description\", description);\n\n// var instructor = \"Random Instructor \" + Math.floor(Math.random() * randomNumber);\n// postman.setEnvironmentVariable(\"instructor\", instructor);\n\n// var password = Math.floor(Math.random() * randomNumber);\n// postman.setEnvironmentVariable(\"password\", password);\n\n// var termID = Math.floor(Math.random() * randomNumber);\n// postman.setEnvironmentVariable(\"termID\", termID);\n\n// var courseNo = \"The Force 101\";\n\n// postman.setEnvironmentVariable(\"courseNo\", courseNo);\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "12771279"
	},
	"item": [
		{
			"name": "ProctorU API - Defects",
			"item": [
				{
					"name": "DEV-3614 Bluebird Testing",
					"item": [
						{
							"name": "getTimeZoneList",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')",
											"var time = moment()",
											"",
											"pm.environment.set('currentTimeISO', time.toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"url": {
									"raw": "{{URL}}/getTimeZoneList/?time_sent={{currentTimeISO}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"getTimeZoneList",
										""
									],
									"query": [
										{
											"key": "time_sent",
											"value": "{{currentTimeISO}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ"
										}
									]
								},
								"description": "This resource returns a list of time zones."
							},
							"response": [
								{
									"name": "getTimeZoneList",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"url": {
											"raw": "{{URL}}/getTimeZoneList/?time_sent={{currentTime}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"getTimeZoneList",
												""
											],
											"query": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": "{\n    \"time_sent\": \"2020-05-13T16:18:23Z\",\n    \"response_code\": 1,\n    \"message\": \"\",\n    \"data\": [\n        {\n            \"TimeZoneNo\": 42,\n            \"GMTOffset\": -12.0,\n            \"Id\": \"Dateline Standard Time\",\n            \"DisplayName\": \"(UTC-12:00) International Date Line West\",\n            \"Description\": \"Dateline Standard Time\",\n            \"SortOrder\": 100,\n            \"LocalTime\": \"4:18 AM\",\n            \"DST\": false\n            }\n        ]\n    }"
								}
							]
						},
						{
							"name": "addBlueBirdExam - ETS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{ets-api-token}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "time_sent",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
											"type": "text"
										},
										{
											"key": "student_id",
											"value": "{{student_id}}",
											"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
											"type": "text"
										},
										{
											"key": "user_id",
											"value": "{{userID}}",
											"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_password",
											"value": "{{userPassword}}",
											"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"description": "<p><strong>(required)</strong></p>Test-taker's first name",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's last name",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{$randomCountryCode}}",
											"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
											"type": "text"
										},
										{
											"key": "phone1",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Primary Telephone Number",
											"type": "text"
										},
										{
											"key": "phone2",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Secondary Telephone Number",
											"type": "text",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{$randomEmail}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's Email",
											"type": "text"
										},
										{
											"key": "time_zone_id",
											"value": "Central Standard Time",
											"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
											"type": "text"
										},
										{
											"key": "notify",
											"value": "N",
											"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
											"type": "text"
										},
										{
											"key": "exam_id",
											"value": "EX_{{random_number}}",
											"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
											"type": "text"
										},
										{
											"key": "course_id",
											"value": "ARC_{{random_number}}",
											"description": "Institution's unique identifier for a course",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{$randomLoremWords}} - BlueBird Licata",
											"description": "<p><strong>(required)</strong></p> Title of the exam",
											"type": "text"
										},
										{
											"key": "active_date",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "end_date",
											"value": "{{RandomEndFuture}}",
											"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "test_delivery_id",
											"value": "5050",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "proctoru",
											"description": "Instructor's name  ",
											"type": "text"
										},
										{
											"key": "course_no",
											"value": "course{{random_number}}",
											"description": "Course Description.",
											"type": "text"
										},
										{
											"key": "exam_url",
											"value": "https://starwars.com/quiz",
											"description": "<p><strong>(required)</strong></p> URL where the exam is located",
											"type": "text"
										},
										{
											"key": "exam_password",
											"value": "{{password}}",
											"description": "Password for the exam",
											"type": "text",
											"disabled": true
										},
										{
											"key": "notes",
											"value": "This is a ProctorU QA Test by the QA Dept at ProctorU. Don't Cancel, Review, etc. If you have questions, contact Engineering at ProctorU.",
											"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
											"type": "text"
										},
										{
											"key": "preset",
											"value": "low",
											"description": "low, medium, high - defaults to low if left blank/not included",
											"type": "text"
										},
										{
											"key": "department_id",
											"value": "",
											"description": "defaults to the default dept if blank/not included.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "duration",
											"value": "50",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{URL}}/addBlueBirdExam/"
							},
							"response": [
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{userID}}",
													"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"description": "<p><strong>(required)</strong></p>Test-taker's first name",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's last name",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"description": "Test-taker's Primary Telephone Number",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"description": "Test-taker's Secondary Telephone Number",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's Email",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"description": "Institution's unique identifier for a course",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"description": "<p><strong>(required)</strong></p> Title of the exam",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"description": "Total time allowed for the exam in minutes. Defaults to `120` if left blank.",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"description": "Instructor's name  ",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"description": "Course Description.",
													"type": "text"
												},
												{
													"key": "exam_url",
													"value": "https://www.starwars.com/quiz",
													"description": "<p><strong>(required)</strong></p> URL where the exam is located",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"description": "Password for the exam",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/",
										"description": "This resource will initiate the addition or update of test-taker registration, as well as adding individual exam information for one student.\n\nTo update an existing BlueBird exam in the system, the student_id, course_id, and exam_id parameters must all contain values, and they must match an existing record in the system."
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								},
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"type": "text"
												},
												{
													"key": "reservation_id",
													"value": "{{reservationID}}",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								}
							]
						},
						{
							"name": "addBlueBirdExam - API University",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"@C1396094 Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// pm.test(\"Contains reservation link\", function () {",
											"//     pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/students/reservations?login_token=\");",
											"// });",
											"pm.test(\"Contains reservation link\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/students/reservations?\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "time_sent",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
											"type": "text"
										},
										{
											"key": "student_id",
											"value": "{{student_id}}",
											"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
											"type": "text"
										},
										{
											"key": "user_id",
											"value": "{{userID}}",
											"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_password",
											"value": "{{userPassword}}",
											"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"description": "<p><strong>(required)</strong></p>Test-taker's first name",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's last name",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{$randomCountryCode}}",
											"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
											"type": "text"
										},
										{
											"key": "phone1",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Primary Telephone Number",
											"type": "text"
										},
										{
											"key": "phone2",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Secondary Telephone Number",
											"type": "text",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{$randomExampleEmail}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's Email",
											"type": "text"
										},
										{
											"key": "time_zone_id",
											"value": "Central Standard Time",
											"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
											"type": "text"
										},
										{
											"key": "notify",
											"value": "N",
											"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
											"type": "text"
										},
										{
											"key": "exam_id",
											"value": "EX_{{random_number}}",
											"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
											"type": "text"
										},
										{
											"key": "course_id",
											"value": "ARC_{{random_number}}",
											"description": "Institution's unique identifier for a course",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{$randomLoremWords}} - BlueBird API Univ",
											"description": "<p><strong>(required)</strong></p> Title of the exam",
											"type": "text"
										},
										{
											"key": "active_date",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "end_date",
											"value": "{{RandomEndFuture}}",
											"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "test_delivery_id",
											"value": "5050",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "proctoru",
											"description": "Instructor's name  ",
											"type": "text"
										},
										{
											"key": "course_no",
											"value": "{{random_number}}",
											"description": "Course Description.",
											"type": "text"
										},
										{
											"key": "exam_url",
											"value": "https://starwars.com/quiz",
											"description": "<p><strong>(required)</strong></p> URL where the exam is located",
											"type": "text"
										},
										{
											"key": "exam_password",
											"value": "{{password}}",
											"description": "Password for the exam",
											"type": "text",
											"disabled": true
										},
										{
											"key": "notes",
											"value": "{{$randomLoremLines}}",
											"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "preset",
											"value": "low",
											"description": "low, medium, high - defaults to low if left blank/not included",
											"type": "text"
										},
										{
											"key": "department_id",
											"value": "2723",
											"description": "defaults to the default dept if blank/not included.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "duration",
											"value": "60",
											"type": "text"
										}
									]
								},
								"url": "{{URL}}/addBlueBirdExam/",
								"description": "DEFECT - CAN SCHEDULE IN PAST"
							},
							"response": [
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{userID}}",
													"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"description": "<p><strong>(required)</strong></p>Test-taker's first name",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's last name",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"description": "Test-taker's Primary Telephone Number",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"description": "Test-taker's Secondary Telephone Number",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's Email",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"description": "Institution's unique identifier for a course",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"description": "<p><strong>(required)</strong></p> Title of the exam",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"description": "Total time allowed for the exam in minutes. Defaults to `120` if left blank.",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"description": "Instructor's name  ",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"description": "Course Description.",
													"type": "text"
												},
												{
													"key": "exam_url",
													"value": "https://www.starwars.com/quiz",
													"description": "<p><strong>(required)</strong></p> URL where the exam is located",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"description": "Password for the exam",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/",
										"description": "This resource will initiate the addition or update of test-taker registration, as well as adding individual exam information for one student.\n\nTo update an existing BlueBird exam in the system, the student_id, course_id, and exam_id parameters must all contain values, and they must match an existing record in the system."
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								},
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"type": "text"
												},
												{
													"key": "reservation_id",
													"value": "{{reservationID}}",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DEV-3652 Department ID for batch schedule requests",
					"item": [
						{
							"name": "batchScheduleWithDepartment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"",
											"// Creates initial time when request sent",
											"",
											"var moment = require('moment')",
											"var time = moment()",
											"var random_int = _.random(1, 3)",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set('randomStartFuture', RandomStartFuture);",
											"pm.environment.set('randomEndFuture', RandomEndFuture);",
											"",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))",
											"// Current Time",
											"",
											"pm.environment.set('currentDate', moment(time, \"YYYY-MM-DD\"));",
											"",
											"pm.environment.set('currentTimeISO', time.toISOString());",
											"",
											"pm.environment.set(\"random_number\", _.random(7, 5));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var url = jsonData.url;",
											"",
											"pm.test(\"@C1396109 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"// Function to perform the validation",
											"var validateCreation = () => new Promise((resolve, reject) => {",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'content-type': 'application/json',",
											"            'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"        }",
											"    }, (err, res) => {",
											"        if (err) {",
											"            reject(err);",
											"        } else {",
											"            const status = res.json().data.status;",
											"            if (status === 'processing' || status === 'pending') {",
											"                console.log('validating creation again');",
											"                resolve(false); // Continue the interval",
											"            } else {",
											"                resolve(res); // Stop the interval",
											"            }",
											"        }",
											"    });",
											"});",
											"",
											"// Interval to repeatedly check every 10 seconds",
											"const interval = 10000; // 10 seconds",
											"let checkInterval = setInterval(() => {",
											"    validateCreation().then(res => {",
											"        if (res) {",
											"            clearInterval(checkInterval); // Stop the interval",
											"            pm.test(\"GET request contains successful booking\", () => {",
											"                console.log(res.json().data.status);",
											"                pm.expect(res.json().data.status).to.eql('success');",
											"            });",
											"        }",
											"    }).catch(err => {",
											"        clearInterval(checkInterval); // Stop the interval on error",
											"        console.error(err);",
											"    });",
											"}, interval);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"exam\": {\r\n\"description\": \"Batch Scheduling Example\",\r\n\"notes\": \"<h1>UPDATED Notes4</h1>\",\r\n\"start_date\": \"{{randomStartFuture}}\",\r\n\"end_date\": \"{{randomEndFuture}}\",\r\n\"duration\": 60,\r\n\"external_id\": \"{{external_id}}\",\r\n\"course_id\": \"course123421\",\r\n\"test_delivery_id\": \"5051\",\r\n\"department_id\": \"2723\",\r\n\"notify\":\"N\"\r\n},\r\n\"test_takers\": [\r\n{\r\n\"first_name\": \"Sammy1\",\r\n\"last_name\": \"Tester1\",\r\n\"email\": \"sammytester@proctoru.com\",\r\n\"student_id\": \"1234561\",\r\n\"country\":\"US\",\r\n\"phone\":\"205-444-5555\",\r\n\"extra_time\": \"15\",\r\n\"schedule_id\": \"{{schedule_id1}}\"\r\n},\r\n{\r\n\"first_name\": \"Sandra1\",\r\n\"last_name\": \"Quizze1\",\r\n\"email\": \"sandraquizzer@proctoru.com\",\r\n\"student_id\": \"678906\",\r\n\"country\":\"US\",\r\n\"phone\":\"205-333-6666\",\r\n\"schedule_id\": \"{{schedule_id2}}\"\r\n}\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/batch/scheduling"
							},
							"response": [
								{
									"name": "Batch Schedule Example ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"2020-10-14 17:45\",\r\n        \"end_date\": \"2021-04-19 20:45\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"654314\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"258381\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"258388\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/batch/scheduling"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Aug 2020 21:15:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "Fri, 01 Jan 1990 00:00:00 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"5e3ea682fb4de44b2718a7f26b53923e\""
										},
										{
											"key": "X-Request-Id",
											"value": "Root1-5f3c44f2-cbff9b97d03ac96c7a60f2a8"
										},
										{
											"key": "X-Runtime",
											"value": "0.067098"
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "cf-request-id",
											"value": "04a50669770000f33126363200000001"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "5c4ea688b94bf331-ATL"
										}
									],
									"cookie": [],
									"body": "{\n    \"url\": \"https://go.proctoru.com/api/batch/scheduling/26b2c863-5ada-4480-89a1-7b832fa634a7\"\n}"
								}
							]
						},
						{
							"name": "batchScheduleWithoutDepartment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var url = jsonData.url;",
											"",
											"pm.test(\"@C1396112 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"// Function to perform the validation",
											"var validateCreation = () => new Promise((resolve, reject) => {",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'content-type': 'application/json',",
											"            'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"        }",
											"    }, (err, res) => {",
											"        if (err) {",
											"            reject(err);",
											"        } else {",
											"            const status = res.json().data.status;",
											"            if (status === 'processing' || status === 'pending') {",
											"                console.log('validating creation again');",
											"                resolve(false); // Continue the interval",
											"            } else {",
											"                resolve(res); // Stop the interval",
											"            }",
											"        }",
											"    });",
											"});",
											"",
											"// Interval to repeatedly check every 10 seconds",
											"const interval = 10000; // 10 seconds",
											"let checkInterval = setInterval(() => {",
											"    validateCreation().then(res => {",
											"        if (res) {",
											"            clearInterval(checkInterval); // Stop the interval",
											"            pm.test(\"GET request contains successful booking\", () => {",
											"                console.log(res.json().data.status);",
											"                pm.expect(res.json().data.status).to.eql('success');",
											"            });",
											"        }",
											"    }).catch(err => {",
											"        clearInterval(checkInterval); // Stop the interval on error",
											"        console.error(err);",
											"    });",
											"}, interval);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"      var moment = require('moment')",
											"var time = moment()",
											"var randomDate = moment().add(_.random(7, 1000), \"day\").seconds(0).format(\"YYYY-MM-DD\");",
											"var fiveMin = moment(time).add(5, 'minutes').startOf('minute').toISOString();",
											"var minfiveMin = moment(time).add(5, 'minutes').startOf('minute').format('m');",
											"var nearestFive = Math.round(minfiveMin/5)*5;",
											"var futureStartTime = moment(fiveMin).startOf('hour').add(nearestFive, 'minutes').toISOString();",
											"pm.environment.set('futureStartTime', futureStartTime);",
											"// Creates initial time when request sent",
											"",
											"var moment = require('moment')",
											"var time = moment()",
											"var random_int = _.random(1, 3)",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))",
											"// Current Time",
											"",
											"pm.environment.set('currentDate', moment(time, \"YYYY-MM-DD\"));",
											"",
											"pm.environment.set('currentTimeISO', time.toISOString());",
											"",
											"pm.environment.set(\"random_number\", _.random(7, 5));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"{{futureStartTime}}\",\r\n        \"end_date\": \"{{RandomEndFuture}}\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"{{external_id}}\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"{{schedule_id1}}\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"{{schedule_id2}}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/batch/scheduling",
								"description": "This resource is used to schedule and register multiple students for a single exam with the ease of one API call. \n<br>To view the current status of the scheduling job created from this request, poll the URL given in the response using our 'pollBatchSchedule' request."
							},
							"response": [
								{
									"name": "Batch Schedule Example ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"2020-10-14 17:45\",\r\n        \"end_date\": \"2021-04-19 20:45\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"654314\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"258381\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"258388\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/batch/scheduling"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Aug 2020 21:15:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "Fri, 01 Jan 1990 00:00:00 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"5e3ea682fb4de44b2718a7f26b53923e\""
										},
										{
											"key": "X-Request-Id",
											"value": "Root1-5f3c44f2-cbff9b97d03ac96c7a60f2a8"
										},
										{
											"key": "X-Runtime",
											"value": "0.067098"
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "cf-request-id",
											"value": "04a50669770000f33126363200000001"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "5c4ea688b94bf331-ATL"
										}
									],
									"cookie": [],
									"body": "{\n    \"url\": \"https://go.proctoru.com/api/batch/scheduling/26b2c863-5ada-4480-89a1-7b832fa634a7\"\n}"
								}
							]
						},
						{
							"name": "batchScheduleWithWrongDepartment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var url = jsonData.url;",
											"",
											"pm.test(\"@C1396110 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"// Function to perform the validation",
											"var validateCreation = () => new Promise((resolve, reject) => {",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'content-type': 'application/json',",
											"            'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"        }",
											"    }, (err, res) => {",
											"        if (err) {",
											"            reject(err);",
											"        } else {",
											"            const status = res.json().data.status;",
											"            if (status === 'processing' || status === 'pending') {",
											"                console.log('validating creation again');",
											"                resolve(false); // Continue the interval",
											"            } else {",
											"                resolve(res); // Stop the interval",
											"            }",
											"        }",
											"    });",
											"});",
											"",
											"// Interval to repeatedly check every 10 seconds",
											"const interval = 10000; // 10 seconds",
											"let checkInterval = setInterval(() => {",
											"    validateCreation().then(res => {",
											"        if (res) {",
											"            clearInterval(checkInterval); // Stop the interval",
											"            pm.test(\"GET request contains successful booking\", () => {",
											"                console.log(res.json().data.status);",
											"                pm.expect(res.json().data.status).to.eql('success');",
											"            });",
											"        }",
											"    }).catch(err => {",
											"        clearInterval(checkInterval); // Stop the interval on error",
											"        console.error(err);",
											"        console.error(res);",
											"    });",
											"}, interval);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"",
											"// Creates initial time when request sent",
											"",
											"var moment = require('moment')",
											"var time = moment()",
											"var random_int = _.random(1, 3)",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))",
											"// Current Time",
											"",
											"pm.environment.set('currentDate', moment(time, \"YYYY-MM-DD\"));",
											"",
											"pm.environment.set('currentTimeISO', time.toISOString());",
											"",
											"pm.environment.set(\"random_number\", _.random(7, 5));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"exam\": {\r\n\"description\": \"Batch Scheduling Example\",\r\n\"notes\": \"<h1>UPDATED Notes4</h1>\",\r\n\"start_date\": \"{{randomStartFuture}}\",\r\n\"end_date\": \"{{randomEndFuture}}\",\r\n\"duration\": 60,\r\n\"external_id\": \"{{external_id}}\",\r\n\"course_id\": \"course123421\",\r\n\"test_delivery_id\": \"5051\",\r\n\"department_id\": \"2713\",\r\n\"notify\":\"N\"\r\n},\r\n\"test_takers\": [\r\n{\r\n\"first_name\": \"Sammy1\",\r\n\"last_name\": \"Tester1\",\r\n\"email\": \"sammytester@proctoru.com\",\r\n\"student_id\": \"1234561\",\r\n\"country\":\"US\",\r\n\"phone\":\"205-444-5555\",\r\n\"extra_time\": \"15\",\r\n\"schedule_id\": \"{{schedule_id1}}\"\r\n},\r\n{\r\n\"first_name\": \"Sandra1\",\r\n\"last_name\": \"Quizze1\",\r\n\"email\": \"sandraquizzer@proctoru.com\",\r\n\"student_id\": \"678906\",\r\n\"country\":\"US\",\r\n\"phone\":\"205-333-6666\",\r\n\"schedule_id\": \"{{schedule_id2}}\"\r\n}\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/batch/scheduling",
								"description": "fake/other institution's department"
							},
							"response": [
								{
									"name": "Batch Schedule Example ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"2020-10-14 17:45\",\r\n        \"end_date\": \"2021-04-19 20:45\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"654314\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"258381\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"258388\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/batch/scheduling"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Aug 2020 21:15:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "Fri, 01 Jan 1990 00:00:00 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"5e3ea682fb4de44b2718a7f26b53923e\""
										},
										{
											"key": "X-Request-Id",
											"value": "Root1-5f3c44f2-cbff9b97d03ac96c7a60f2a8"
										},
										{
											"key": "X-Runtime",
											"value": "0.067098"
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "cf-request-id",
											"value": "04a50669770000f33126363200000001"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "5c4ea688b94bf331-ATL"
										}
									],
									"cookie": [],
									"body": "{\n    \"url\": \"https://go.proctoru.com/api/batch/scheduling/26b2c863-5ada-4480-89a1-7b832fa634a7\"\n}"
								}
							]
						},
						{
							"name": "batchScheduleWithEmptyDepartment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var url = jsonData.url;",
											"",
											"pm.test(\"@C1396111 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"// Function to perform the validation",
											"var validateCreation = () => new Promise((resolve, reject) => {",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'content-type': 'application/json',",
											"            'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"        }",
											"    }, (err, res) => {",
											"        if (err) {",
											"            reject(err);",
											"        } else {",
											"            const status = res.json().data.status;",
											"            if (status === 'processing' || status === 'pending') {",
											"                console.log('validating creation again');",
											"                resolve(false); // Continue the interval",
											"            } else {",
											"                resolve(res); // Stop the interval",
											"            }",
											"        }",
											"    });",
											"});",
											"",
											"// Interval to repeatedly check every 10 seconds",
											"const interval = 10000; // 10 seconds",
											"let checkInterval = setInterval(() => {",
											"    validateCreation().then(res => {",
											"        if (res) {",
											"            clearInterval(checkInterval); // Stop the interval",
											"            pm.test(\"GET request contains successful booking\", () => {",
											"                console.log(res.json().data.status);",
											"                pm.expect(res.json().data.status).to.eql('success');",
											"            });",
											"        }",
											"    }).catch(err => {",
											"        clearInterval(checkInterval); // Stop the interval on error",
											"        console.error(err);",
											"    });",
											"}, interval);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"",
											"// Creates initial time when request sent",
											"",
											"var moment = require('moment')",
											"var time = moment()",
											"var random_int = _.random(1, 3)",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))",
											"// Current Time",
											"",
											"pm.environment.set('currentDate', moment(time, \"YYYY-MM-DD\"));",
											"",
											"pm.environment.set('currentTimeISO', time.toISOString());",
											"",
											"pm.environment.set(\"random_number\", _.random(7, 5));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"exam\": {\r\n\"description\": \"Batch Scheduling Example\",\r\n\"notes\": \"<h1>UPDATED Notes4</h1>\",\r\n\"start_date\": \"{{randomStartFuture}}\",\r\n\"end_date\": \"{{RandomEndFuture}}\",\r\n\"duration\": 60,\r\n\"external_id\": \"{{external_id}}\",\r\n\"course_id\": \"course123421\",\r\n\"test_delivery_id\": \"5051\",\r\n\"department_id\": \"\",\r\n\"notify\":\"N\"\r\n},\r\n\"test_takers\": [\r\n{\r\n\"first_name\": \"Sammy1\",\r\n\"last_name\": \"Tester1\",\r\n\"email\": \"sammytester@proctoru.com\",\r\n\"student_id\": \"1234561\",\r\n\"country\":\"US\",\r\n\"phone\":\"205-444-5555\",\r\n\"extra_time\": \"15\",\r\n\"schedule_id\": \"{{schedule_id1}}\"\r\n},\r\n{\r\n\"first_name\": \"Sandra1\",\r\n\"last_name\": \"Quizze1\",\r\n\"email\": \"sandraquizzer@proctoru.com\",\r\n\"student_id\": \"678906\",\r\n\"country\":\"US\",\r\n\"phone\":\"205-333-6666\",\r\n\"schedule_id\": \"{{schedule_id2}}\"\r\n}\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/batch/scheduling"
							},
							"response": [
								{
									"name": "Batch Schedule Example ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"2020-10-14 17:45\",\r\n        \"end_date\": \"2021-04-19 20:45\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"654314\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"258381\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"258388\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/batch/scheduling"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Aug 2020 21:15:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "Fri, 01 Jan 1990 00:00:00 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"5e3ea682fb4de44b2718a7f26b53923e\""
										},
										{
											"key": "X-Request-Id",
											"value": "Root1-5f3c44f2-cbff9b97d03ac96c7a60f2a8"
										},
										{
											"key": "X-Runtime",
											"value": "0.067098"
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "cf-request-id",
											"value": "04a50669770000f33126363200000001"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "5c4ea688b94bf331-ATL"
										}
									],
									"cookie": [],
									"body": "{\n    \"url\": \"https://go.proctoru.com/api/batch/scheduling/26b2c863-5ada-4480-89a1-7b832fa634a7\"\n}"
								}
							]
						},
						{
							"name": "batchScheduleWithFakeDepartment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var url = jsonData.url;",
											"",
											"pm.test(\"@C1396113 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"// Function to perform the validation",
											"var validateCreation = () => new Promise((resolve, reject) => {",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'content-type': 'application/json',",
											"            'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"        }",
											"    }, (err, res) => {",
											"        if (err) {",
											"            reject(err);",
											"        } else {",
											"            const status = res.json().data.status;",
											"            if (status === 'processing' || status === 'pending') {",
											"                console.log('validating creation again');",
											"                resolve(false); // Continue the interval",
											"            } else {",
											"                resolve(res); // Stop the interval",
											"            }",
											"        }",
											"    });",
											"});",
											"",
											"// Interval to repeatedly check every 10 seconds",
											"const interval = 10000; // 10 seconds",
											"let checkInterval = setInterval(() => {",
											"    validateCreation().then(res => {",
											"        if (res) {",
											"            clearInterval(checkInterval); // Stop the interval",
											"            pm.test(\"GET request contains successful booking\", () => {",
											"                console.log(res.json().data.status);",
											"                pm.expect(res.json().data.status).to.eql('success');",
											"            });",
											"        }",
											"    }).catch(err => {",
											"        clearInterval(checkInterval); // Stop the interval on error",
											"        console.error(err);",
											"    });",
											"}, interval);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"",
											"// Creates initial time when request sent",
											"",
											"var moment = require('moment')",
											"var time = moment()",
											"var random_int = _.random(1, 3)",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))",
											"// Current Time",
											"",
											"pm.environment.set('currentDate', moment(time, \"YYYY-MM-DD\"));",
											"",
											"pm.environment.set('currentTimeISO', time.toISOString());",
											"",
											"pm.environment.set(\"random_number\", _.random(7, 5));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"exam\": {\r\n\"description\": \"Batch Scheduling Example\",\r\n\"notes\": \"<h1>UPDATED Notes4</h1>\",\r\n\"start_date\": \"{{randomStartFuture}}\",\r\n\"end_date\": \"{{randomEndFuture}}\",\r\n\"duration\": 60,\r\n\"external_id\": \"{{external_id}}\",\r\n\"course_id\": \"course123421\",\r\n\"test_delivery_id\": \"5051\",\r\n\"department_id\": \"123456\",\r\n\"notify\":\"N\"\r\n},\r\n\"test_takers\": [\r\n{\r\n\"first_name\": \"Sammy1\",\r\n\"last_name\": \"Tester1\",\r\n\"email\": \"sammytester@proctoru.com\",\r\n\"student_id\": \"1234561\",\r\n\"country\":\"US\",\r\n\"phone\":\"205-444-5555\",\r\n\"extra_time\": \"15\",\r\n\"schedule_id\": \"{{schedule_id1}}\"\r\n},\r\n{\r\n\"first_name\": \"Sandra1\",\r\n\"last_name\": \"Quizze1\",\r\n\"email\": \"sandraquizzer@proctoru.com\",\r\n\"student_id\": \"678906\",\r\n\"country\":\"US\",\r\n\"phone\":\"205-333-6666\",\r\n\"schedule_id\": \"{{schedule_id2}}\"\r\n}\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/batch/scheduling"
							},
							"response": [
								{
									"name": "Batch Schedule Example ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"2020-10-14 17:45\",\r\n        \"end_date\": \"2021-04-19 20:45\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"654314\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"258381\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"258388\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/batch/scheduling"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Aug 2020 21:15:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "Fri, 01 Jan 1990 00:00:00 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"5e3ea682fb4de44b2718a7f26b53923e\""
										},
										{
											"key": "X-Request-Id",
											"value": "Root1-5f3c44f2-cbff9b97d03ac96c7a60f2a8"
										},
										{
											"key": "X-Runtime",
											"value": "0.067098"
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "cf-request-id",
											"value": "04a50669770000f33126363200000001"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "5c4ea688b94bf331-ATL"
										}
									],
									"cookie": [],
									"body": "{\n    \"url\": \"https://go.proctoru.com/api/batch/scheduling/26b2c863-5ada-4480-89a1-7b832fa634a7\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "DEV-2886 Add department_id as parameter to AddBB API",
					"item": [
						{
							"name": "addBlueBirdExam - With Department",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var url = jsonData.url",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"Response contains Login URL\", function () {",
											"//     pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/students/reservations?login_token=\");",
											"// });",
											"pm.test(\"@C1396047 Response contains Login URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/students/reservations\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "time_sent",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
											"type": "text"
										},
										{
											"key": "student_id",
											"value": "{{student_id}}",
											"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
											"type": "text"
										},
										{
											"key": "user_id",
											"value": "{{userID}}",
											"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_password",
											"value": "{{userPassword}}",
											"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "Bluebird",
											"description": "<p><strong>(required)</strong></p>Test-taker's first name",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "API-Test",
											"description": "<p><strong>(required)</strong></p> Test-taker's last name",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{$randomCountryCode}}",
											"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
											"type": "text"
										},
										{
											"key": "phone1",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Primary Telephone Number",
											"type": "text"
										},
										{
											"key": "phone2",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Secondary Telephone Number",
											"type": "text",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{$randomExampleEmail}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's Email",
											"type": "text"
										},
										{
											"key": "time_zone_id",
											"value": "Central Standard Time",
											"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
											"type": "text"
										},
										{
											"key": "notify",
											"value": "N",
											"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
											"type": "text"
										},
										{
											"key": "exam_id",
											"value": "EX_{{random_number}}",
											"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
											"type": "text"
										},
										{
											"key": "course_id",
											"value": "ARC_{{random_number}}",
											"description": "Institution's unique identifier for a course",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{$randomLoremWords}} - BlueBird API Univ",
											"description": "<p><strong>(required)</strong></p> Title of the exam",
											"type": "text"
										},
										{
											"key": "active_date",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "end_date",
											"value": "{{RandomEndFuture}}",
											"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "test_delivery_id",
											"value": "5050",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "proctoru",
											"description": "Instructor's name  ",
											"type": "text"
										},
										{
											"key": "course_no",
											"value": "course123456",
											"description": "Course Description.",
											"type": "text"
										},
										{
											"key": "exam_url",
											"value": "https://starwars.com/quiz",
											"description": "<p><strong>(required)</strong></p> URL where the exam is located",
											"type": "text"
										},
										{
											"key": "notes",
											"value": "{{$randomLoremLines}}",
											"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "preset",
											"value": "high",
											"description": "low, medium, high - defaults to low if left blank/not included",
											"type": "text"
										},
										{
											"key": "department_id",
											"value": "2723",
											"description": "defaults to the default dept if blank/not included.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "60",
											"type": "text"
										}
									]
								},
								"url": "{{URL}}/addBlueBirdExam/"
							},
							"response": [
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"type": "text"
												},
												{
													"key": "reservation_id",
													"value": "{{reservationID}}",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								},
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{userID}}",
													"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"description": "<p><strong>(required)</strong></p>Test-taker's first name",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's last name",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"description": "Test-taker's Primary Telephone Number",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"description": "Test-taker's Secondary Telephone Number",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's Email",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"description": "Institution's unique identifier for a course",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"description": "<p><strong>(required)</strong></p> Title of the exam",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"description": "Total time allowed for the exam in minutes. Defaults to `120` if left blank.",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"description": "Instructor's name  ",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"description": "Course Description.",
													"type": "text"
												},
												{
													"key": "exam_url",
													"value": "https://www.starwars.com/quiz",
													"description": "<p><strong>(required)</strong></p> URL where the exam is located",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"description": "Password for the exam",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/",
										"description": "This resource will initiate the addition or update of test-taker registration, as well as adding individual exam information for one student.\n\nTo update an existing BlueBird exam in the system, the student_id, course_id, and exam_id parameters must all contain values, and they must match an existing record in the system."
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								}
							]
						},
						{
							"name": "addBlueBirdExam - Without Department",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var url = jsonData.url",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"Response contains Login URL\", function () {",
											"//     pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/students/reservations?login_token=\");",
											"// });",
											"pm.test(\"@C1396056 Response contains Login URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/students/reservations\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "time_sent",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
											"type": "text"
										},
										{
											"key": "student_id",
											"value": "{{student_id}}",
											"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
											"type": "text"
										},
										{
											"key": "user_id",
											"value": "{{userID}}",
											"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_password",
											"value": "{{userPassword}}",
											"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "{{$randomFirstName}}",
											"description": "<p><strong>(required)</strong></p>Test-taker's first name",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "{{$randomLastName}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's last name",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{$randomCountryCode}}",
											"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
											"type": "text"
										},
										{
											"key": "phone1",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Primary Telephone Number",
											"type": "text"
										},
										{
											"key": "phone2",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Secondary Telephone Number",
											"type": "text",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{$randomExampleEmail}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's Email",
											"type": "text"
										},
										{
											"key": "time_zone_id",
											"value": "Central Standard Time",
											"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
											"type": "text"
										},
										{
											"key": "notify",
											"value": "N",
											"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
											"type": "text"
										},
										{
											"key": "exam_id",
											"value": "EX_{{random_number}}",
											"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
											"type": "text"
										},
										{
											"key": "course_id",
											"value": "ARC_{{random_number}}",
											"description": "Institution's unique identifier for a course",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{$randomLoremWords}} - BlueBird API Univ",
											"description": "<p><strong>(required)</strong></p> Title of the exam",
											"type": "text"
										},
										{
											"key": "active_date",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "end_date",
											"value": "{{RandomEndFuture}}",
											"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "test_delivery_id",
											"value": "5050",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "proctoru",
											"description": "Instructor's name  ",
											"type": "text"
										},
										{
											"key": "course_no",
											"value": "{{random_number}}",
											"description": "Course Description.",
											"type": "text"
										},
										{
											"key": "exam_url",
											"value": "https://starwars.com/quiz",
											"description": "<p><strong>(required)</strong></p> URL where the exam is located",
											"type": "text"
										},
										{
											"key": "exam_password",
											"value": "{{password}}",
											"description": "Password for the exam",
											"type": "text",
											"disabled": true
										},
										{
											"key": "notes",
											"value": "{{$randomLoremLines}}",
											"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "preset",
											"value": "",
											"description": "low, medium, high - defaults to low if left blank/not included",
											"type": "text"
										},
										{
											"key": "department_id",
											"value": "",
											"description": "defaults to the default dept if blank/not included.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "duration",
											"value": "60",
											"type": "text"
										}
									]
								},
								"url": "{{URL}}/addBlueBirdExam/"
							},
							"response": [
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{userID}}",
													"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"description": "<p><strong>(required)</strong></p>Test-taker's first name",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's last name",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"description": "Test-taker's Primary Telephone Number",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"description": "Test-taker's Secondary Telephone Number",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's Email",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"description": "Institution's unique identifier for a course",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"description": "<p><strong>(required)</strong></p> Title of the exam",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"description": "Total time allowed for the exam in minutes. Defaults to `120` if left blank.",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"description": "Instructor's name  ",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"description": "Course Description.",
													"type": "text"
												},
												{
													"key": "exam_url",
													"value": "https://www.starwars.com/quiz",
													"description": "<p><strong>(required)</strong></p> URL where the exam is located",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"description": "Password for the exam",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/",
										"description": "This resource will initiate the addition or update of test-taker registration, as well as adding individual exam information for one student.\n\nTo update an existing BlueBird exam in the system, the student_id, course_id, and exam_id parameters must all contain values, and they must match an existing record in the system."
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								},
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"type": "text"
												},
												{
													"key": "reservation_id",
													"value": "{{reservationID}}",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								}
							]
						},
						{
							"name": "addBlueBirdExam - Wrong Department",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"@C1396054 Response contains Invalid Deparment error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Department : Error\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "time_sent",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
											"type": "text"
										},
										{
											"key": "student_id",
											"value": "{{random_number}}",
											"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
											"type": "text"
										},
										{
											"key": "user_id",
											"value": "{{userID}}",
											"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_password",
											"value": "{{userPassword}}",
											"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "Bluebird",
											"description": "<p><strong>(required)</strong></p>Test-taker's first name",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "API-Test",
											"description": "<p><strong>(required)</strong></p> Test-taker's last name",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{$randomCountryCode}}",
											"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
											"type": "text"
										},
										{
											"key": "phone1",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Primary Telephone Number",
											"type": "text"
										},
										{
											"key": "phone2",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Secondary Telephone Number",
											"type": "text",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{$randomExampleEmail}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's Email",
											"type": "text"
										},
										{
											"key": "time_zone_id",
											"value": "Central Standard Time",
											"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
											"type": "text"
										},
										{
											"key": "notify",
											"value": "N",
											"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
											"type": "text"
										},
										{
											"key": "exam_id",
											"value": "EX_{{random_number}}",
											"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
											"type": "text"
										},
										{
											"key": "course_id",
											"value": "ARC_{{random_number}}",
											"description": "Institution's unique identifier for a course",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{$randomLoremWords}} - BlueBird API Univ",
											"description": "<p><strong>(required)</strong></p> Title of the exam",
											"type": "text"
										},
										{
											"key": "active_date",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "end_date",
											"value": "{{RandomEndFuture}}",
											"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "test_delivery_id",
											"value": "5050",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "proctoru",
											"description": "Instructor's name  ",
											"type": "text"
										},
										{
											"key": "course_no",
											"value": "{{random_number}}",
											"description": "Course Description.",
											"type": "text"
										},
										{
											"key": "exam_url",
											"value": "https://starwars.com/quiz",
											"description": "<p><strong>(required)</strong></p> URL where the exam is located",
											"type": "text"
										},
										{
											"key": "exam_password",
											"value": "{{password}}",
											"description": "Password for the exam",
											"type": "text",
											"disabled": true
										},
										{
											"key": "notes",
											"value": "{{$randomLoremLines}}",
											"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "preset",
											"value": "",
											"description": "low, medium, high - defaults to low if left blank/not included",
											"type": "text"
										},
										{
											"key": "department_id",
											"value": "2713",
											"description": "defaults to the default dept if blank/not included.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "60",
											"type": "text"
										}
									]
								},
								"url": "{{URL}}/addBlueBirdExam/"
							},
							"response": [
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"type": "text"
												},
												{
													"key": "reservation_id",
													"value": "{{reservationID}}",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								},
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{userID}}",
													"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"description": "<p><strong>(required)</strong></p>Test-taker's first name",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's last name",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"description": "Test-taker's Primary Telephone Number",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"description": "Test-taker's Secondary Telephone Number",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's Email",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"description": "Institution's unique identifier for a course",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"description": "<p><strong>(required)</strong></p> Title of the exam",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"description": "Total time allowed for the exam in minutes. Defaults to `120` if left blank.",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"description": "Instructor's name  ",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"description": "Course Description.",
													"type": "text"
												},
												{
													"key": "exam_url",
													"value": "https://www.starwars.com/quiz",
													"description": "<p><strong>(required)</strong></p> URL where the exam is located",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"description": "Password for the exam",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/",
										"description": "This resource will initiate the addition or update of test-taker registration, as well as adding individual exam information for one student.\n\nTo update an existing BlueBird exam in the system, the student_id, course_id, and exam_id parameters must all contain values, and they must match an existing record in the system."
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								}
							]
						},
						{
							"name": "addBlueBirdExam - Fake Department",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"@C1396057 Response contains Invalid Deparment error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Department : Error\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"",
											"// Creates initial time when request sent",
											"",
											"var moment = require('moment')",
											"var time = moment()",
											"var random_int = _.random(1, 3)",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))",
											"// Current Time",
											"",
											"pm.environment.set('currentDate', moment(time, \"YYYY-MM-DD\"));",
											"",
											"pm.environment.set('currentTimeISO', time.toISOString());",
											"",
											"pm.environment.set(\"random_number\", _.random(7, 5));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "time_sent",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
											"type": "text"
										},
										{
											"key": "student_id",
											"value": "{{student_id}}",
											"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
											"type": "text"
										},
										{
											"key": "user_id",
											"value": "{{userID}}",
											"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_password",
											"value": "{{userPassword}}",
											"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "Bluebird",
											"description": "<p><strong>(required)</strong></p>Test-taker's first name",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "API-Test",
											"description": "<p><strong>(required)</strong></p> Test-taker's last name",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{$randomCountryCode}}",
											"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
											"type": "text"
										},
										{
											"key": "phone1",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Primary Telephone Number",
											"type": "text"
										},
										{
											"key": "phone2",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Secondary Telephone Number",
											"type": "text",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{$randomExampleEmail}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's Email",
											"type": "text"
										},
										{
											"key": "time_zone_id",
											"value": "Central Standard Time",
											"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
											"type": "text"
										},
										{
											"key": "notify",
											"value": "N",
											"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
											"type": "text"
										},
										{
											"key": "exam_id",
											"value": "EX_{{random_number}}",
											"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
											"type": "text"
										},
										{
											"key": "course_id",
											"value": "ARC_{{random_number}}",
											"description": "Institution's unique identifier for a course",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{$randomLoremWords}} - BlueBird API Univ",
											"description": "<p><strong>(required)</strong></p> Title of the exam",
											"type": "text"
										},
										{
											"key": "active_date",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "end_date",
											"value": "{{randomEndFuture}}",
											"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "test_delivery_id",
											"value": "5050",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "proctoru",
											"description": "Instructor's name  ",
											"type": "text"
										},
										{
											"key": "course_no",
											"value": "course123456",
											"description": "Course Description.",
											"type": "text"
										},
										{
											"key": "exam_url",
											"value": "https://starwars.com/quiz",
											"description": "<p><strong>(required)</strong></p> URL where the exam is located",
											"type": "text"
										},
										{
											"key": "exam_password",
											"value": "{{password}}",
											"description": "Password for the exam",
											"type": "text",
											"disabled": true
										},
										{
											"key": "notes",
											"value": "{{$randomLoremLines}}",
											"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "preset",
											"value": "",
											"description": "low, medium, high - defaults to low if left blank/not included",
											"type": "text"
										},
										{
											"key": "department_id",
											"value": "123456789",
											"description": "defaults to the default dept if blank/not included.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "60",
											"type": "text"
										}
									]
								},
								"url": "{{URL}}/addBlueBirdExam/"
							},
							"response": [
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"type": "text"
												},
												{
													"key": "reservation_id",
													"value": "{{reservationID}}",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								},
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{userID}}",
													"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"description": "<p><strong>(required)</strong></p>Test-taker's first name",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's last name",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"description": "Test-taker's Primary Telephone Number",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"description": "Test-taker's Secondary Telephone Number",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's Email",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"description": "Institution's unique identifier for a course",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"description": "<p><strong>(required)</strong></p> Title of the exam",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"description": "Total time allowed for the exam in minutes. Defaults to `120` if left blank.",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"description": "Instructor's name  ",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"description": "Course Description.",
													"type": "text"
												},
												{
													"key": "exam_url",
													"value": "https://www.starwars.com/quiz",
													"description": "<p><strong>(required)</strong></p> URL where the exam is located",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"description": "Password for the exam",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/",
										"description": "This resource will initiate the addition or update of test-taker registration, as well as adding individual exam information for one student.\n\nTo update an existing BlueBird exam in the system, the student_id, course_id, and exam_id parameters must all contain values, and they must match an existing record in the system."
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								}
							]
						},
						{
							"name": "addBlueBirdExam - Empty Department",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var url = jsonData.url",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"@C1396055 Response contains Login URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/students/reservations\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "time_sent",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
											"type": "text"
										},
										{
											"key": "student_id",
											"value": "{{student_id}}",
											"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
											"type": "text"
										},
										{
											"key": "user_id",
											"value": "{{userID}}",
											"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_password",
											"value": "{{userPassword}}",
											"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
											"type": "text",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "Bluebird",
											"description": "<p><strong>(required)</strong></p>Test-taker's first name",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "API-Test",
											"description": "<p><strong>(required)</strong></p> Test-taker's last name",
											"type": "text"
										},
										{
											"key": "country",
											"value": "{{$randomCountryCode}}",
											"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
											"type": "text"
										},
										{
											"key": "phone1",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Primary Telephone Number",
											"type": "text"
										},
										{
											"key": "phone2",
											"value": "{{$randomPhoneNumber}}",
											"description": "Test-taker's Secondary Telephone Number",
											"type": "text",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{$randomExampleEmail}}",
											"description": "<p><strong>(required)</strong></p> Test-taker's Email",
											"type": "text"
										},
										{
											"key": "time_zone_id",
											"value": "Central Standard Time",
											"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
											"type": "text"
										},
										{
											"key": "notify",
											"value": "N",
											"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
											"type": "text"
										},
										{
											"key": "exam_id",
											"value": "EX_{{random_number}}",
											"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
											"type": "text"
										},
										{
											"key": "course_id",
											"value": "ARC_{{random_number}}",
											"description": "Institution's unique identifier for a course",
											"type": "text"
										},
										{
											"key": "description",
											"value": "{{$randomLoremWords}} - BlueBird API Univ",
											"description": "<p><strong>(required)</strong></p> Title of the exam",
											"type": "text"
										},
										{
											"key": "active_date",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "end_date",
											"value": "{{RandomEndFuture}}",
											"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
											"type": "text"
										},
										{
											"key": "test_delivery_id",
											"value": "5050",
											"type": "text",
											"disabled": true
										},
										{
											"key": "password",
											"value": "proctoru",
											"description": "Instructor's name  ",
											"type": "text"
										},
										{
											"key": "course_no",
											"value": "{{random_number}}",
											"description": "Course Description.",
											"type": "text"
										},
										{
											"key": "exam_url",
											"value": "https://starwars.com/quiz",
											"description": "<p><strong>(required)</strong></p> URL where the exam is located",
											"type": "text"
										},
										{
											"key": "exam_password",
											"value": "{{password}}",
											"description": "Password for the exam",
											"type": "text",
											"disabled": true
										},
										{
											"key": "notes",
											"value": "{{$randomLoremLines}}",
											"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "preset",
											"value": "",
											"description": "low, medium, high - defaults to low if left blank/not included",
											"type": "text"
										},
										{
											"key": "department_id",
											"value": "",
											"description": "defaults to the default dept if blank/not included.",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "60",
											"type": "text"
										}
									]
								},
								"url": "{{URL}}/addBlueBirdExam/"
							},
							"response": [
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{studentID}}",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"type": "text"
												},
												{
													"key": "reservation_id",
													"value": "{{reservationID}}",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								},
								{
									"name": "1 - Successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"description": "Institution's unique test-taker ID. Can be used to scope the report down to an individual user.",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{userID}}",
													"description": "Username for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "user_password",
													"value": "{{userPassword}}",
													"description": "ProctorU's password for the test-taker; used to log in to ProctorU's scheduling system",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "{{firstName}}",
													"description": "<p><strong>(required)</strong></p>Test-taker's first name",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "{{lastName}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's last name",
													"type": "text"
												},
												{
													"key": "country",
													"value": "{{country}}",
													"description": "<p><strong>(preferred)</strong></p> Test-taker's Country ",
													"type": "text"
												},
												{
													"key": "phone1",
													"value": "{{phone1}}",
													"description": "Test-taker's Primary Telephone Number",
													"type": "text"
												},
												{
													"key": "phone2",
													"value": "{{phone2}}",
													"description": "Test-taker's Secondary Telephone Number",
													"type": "text"
												},
												{
													"key": "email",
													"value": "{{email}}",
													"description": "<p><strong>(required)</strong></p> Test-taker's Email",
													"type": "text"
												},
												{
													"key": "time_zone_id",
													"value": "{{time_zone_id}}",
													"description": "<p><strong>(preferred)</strong></p> Time Zone ID - please call getTimeZoneList for a list of IDs",
													"type": "text"
												},
												{
													"key": "notify",
													"value": "Y",
													"description": "Whether to notify the test-taker of this scheduling by e-mail. Defaults to true if omitted.  ",
													"type": "text"
												},
												{
													"key": "exam_id",
													"value": "{{examID}}",
													"description": "<p><strong>(required)</strong></p>Institution's unique exam ID. Pass this back in order to update the exam. <br><br><strong>Please note that when creating the exam_id, the system appends the student_id to it as well.</strong> <br><br> Example: <br><br>Sending over the following params:<br><br><code>{ \"exam_id\": \"123\", \"student_id\": \"456\"}</code><br><br> will result in the <code>exam_id</code> being \"123-456\". This is because bluebird exams are treated as single user exams.  When using certain reports, this may be reflected in the response that is given back.",
													"type": "text"
												},
												{
													"key": "course_id",
													"value": "{{courseID}}",
													"description": "Institution's unique identifier for a course",
													"type": "text"
												},
												{
													"key": "description",
													"value": "{{description}}",
													"description": "<p><strong>(required)</strong></p> Title of the exam",
													"type": "text"
												},
												{
													"key": "active_date",
													"value": "{{start_date}}",
													"description": "<p><strong>(required)</strong></p> Earliest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}",
													"description": "<p><strong>(required)</strong></p> Latest possible date for a test-taker to schedule the exam  ",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "{{duration}}",
													"description": "Total time allowed for the exam in minutes. Defaults to `120` if left blank.",
													"type": "text"
												},
												{
													"key": "instructor",
													"value": "{{instructor}}",
													"description": "Instructor's name  ",
													"type": "text"
												},
												{
													"key": "course_no",
													"value": "{{courseNo}}",
													"description": "Course Description.",
													"type": "text"
												},
												{
													"key": "exam_url",
													"value": "https://www.starwars.com/quiz",
													"description": "<p><strong>(required)</strong></p> URL where the exam is located",
													"type": "text"
												},
												{
													"key": "exam_password",
													"value": "{{password}}",
													"description": "Password for the exam",
													"type": "text"
												},
												{
													"key": "notes",
													"value": "{{notes}}",
													"description": "Notes that only the proctors / ProctorU can view. Add instructions here for proctors (no resources allowed, 1 bathroom break, navigate to this url). You may pass HTML here to format the code for visibility.",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/addBlueBirdExam/",
										"description": "This resource will initiate the addition or update of test-taker registration, as well as adding individual exam information for one student.\n\nTo update an existing BlueBird exam in the system, the student_id, course_id, and exam_id parameters must all contain values, and they must match an existing record in the system."
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate",
											"name": "Cache-Control",
											"description": ""
										},
										{
											"key": "Connection",
											"value": "close",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Fri, 11 Aug 2017 16:24:30 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "ETag",
											"value": "W/\"8b434733a3769343f58cbb4b4af428ad\"",
											"name": "ETag",
											"description": ""
										},
										{
											"key": "Server",
											"value": "nginx/1.10.3 (Ubuntu)",
											"name": "Server",
											"description": ""
										},
										{
											"key": "Set-Cookie",
											"value": "request_method=POST; path=/; secure",
											"name": "Set-Cookie",
											"description": ""
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000",
											"name": "Strict-Transport-Security",
											"description": ""
										},
										{
											"key": "Vary",
											"value": "Origin",
											"name": "Vary",
											"description": ""
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL",
											"name": "X-Frame-Options",
											"description": ""
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass",
											"name": "X-Rack-Cache",
											"description": ""
										},
										{
											"key": "X-Request-Id",
											"value": "374fea5e-7609-413d-bcc2-3ff47dc6427a",
											"name": "X-Request-Id",
											"description": ""
										},
										{
											"key": "X-Runtime",
											"value": "2.544132",
											"name": "X-Runtime",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "demo.proctoru.com",
											"path": "/",
											"secure": true,
											"value": "POST",
											"key": "request_method"
										}
									],
									"body": "{\"time_sent\":\"2017-08-11T16:24:30Z\",\"response_code\":1,\"message\":\"\",\"data\":{\"url\":\"https://demo.proctoru.com/students/reservations?login_token=BAhpBIFLJjc%3D--8fb2f15618c63ffccdbfc02d4c6657203e007da0\\u0026return_to=\"}}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var time = new Date().toISOString();",
									"postman.setEnvironmentVariable(\"currentTime\", time);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DEV-3120 Add hierarchy param to batch schedule request",
					"item": [
						{
							"name": "Cirrus Schedule with hierarchy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"      var moment = require('moment')",
											"var time = moment()",
											"var randomDate = moment().add(_.random(7, 1000), \"day\").seconds(0).format(\"YYYY-MM-DD\");",
											"var fiveMin = moment(time).add(5, 'minutes').startOf('minute').toISOString();",
											"var thirtyMin = moment(time).add(30, 'minutes').startOf('minute').toISOString();",
											"var minfiveMin = moment(time).add(5, 'minutes').startOf('minute').format('m');",
											"var nearestFive = Math.round(minfiveMin/5)*5;",
											"var futureStartTime = moment(fiveMin).startOf('hour').add(nearestFive, 'minutes').toISOString();",
											"var futureEndTime = moment(thirtyMin).startOf('hour').add(nearestFive, 'minutes').toISOString();",
											"pm.environment.set('futureStartTime', futureStartTime);",
											"pm.environment.set('futureEndTime', futureEndTime);",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"",
											"// Creates initial time when request sent",
											"",
											"var moment = require('moment')",
											"var time = moment()",
											"var random_int = _.random(1, 3)",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set('randomStartFuture', RandomStartFuture);",
											"pm.environment.set('randomEndFuture', RandomEndFuture);",
											"",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))",
											"// Current Time",
											"",
											"pm.environment.set('currentDate', moment(time, \"YYYY-MM-DD\"));",
											"",
											"pm.environment.set('currentTimeISO', time.toISOString());",
											"",
											"pm.environment.set(\"random_number\", _.random(7, 5));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let jsonData, url;",
											"try {",
											"    jsonData = pm.response.json();",
											"    url = jsonData.url;",
											"} catch (e) {",
											"    console.log(\"HTML was found! Error\");",
											"    throw new Error(\"HTML was found! Error\");",
											"}",
											"",
											"if (!url) {",
											"    console.log(\"var url was blank. fix it\");",
											"    throw new Error(\"var url was blank. fix it\");",
											"}",
											"",
											"pm.test(\"@C1396114 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"const validateCreation = () => new Promise((resolve, reject) => {",
											"    setTimeout(() => {",
											"        pm.sendRequest({",
											"            url: url,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"            }",
											"        }, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"",
											"            const contentType = res.headers.get('Content-Type');",
											"            if (contentType && contentType.includes('text/html')) {",
											"                console.log(\"HTML was found! Error\");",
											"                return reject(new Error(\"HTML was found! Error\"));",
											"            }",
											"",
											"            let responseJson;",
											"            try {",
											"                responseJson = res.json();",
											"            } catch (e) {",
											"                console.error(\"Failed to parse response body as JSON\");",
											"                return reject(new Error(\"Failed to parse response body as JSON\"));",
											"            }",
											"",
											"            if (responseJson.data.status === 'processing' || responseJson.data.status === 'pending') {",
											"                console.log('validating creation again in 5 seconds');",
											"                resolve(validateCreation());",
											"            } else {",
											"                resolve(res);",
											"            }",
											"        });",
											"    }, 10000); // Wait for 3 seconds before the next request",
											"});",
											"",
											"validateCreation().then(res => {",
											"    pm.test(\"GET request contains successful booking\", () => {",
											"        console.log(res.json().data.status);",
											"        pm.expect(res.json().data.status).to.eql('success');",
											"    });",
											"}).catch(error => {",
											"    console.error(error.message);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{cirrus-key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"exam\": {\n\"description\": \"Batch Scheduling Example_11111\",\n\"start_date\": \"{{RandomStartFuture}}\",\n\"end_date\": \"{{RandomEndFuture}}\",\n\"duration\": 30,\n\"external_id\": \"{{external_id}}\",\n\"course_id\": \"course1234\",\n\"test_delivery_id\": \"5050\",\n\"notify\":\"N\",\n\"preset\":\"high\",\n\"hierarchy\": \"958427639\" // hierarchy isn't real\n},\n\"test_takers\": [\n{\n\"first_name\": \"Sandra1\",\n\"last_name\": \"Quizzer\",\n\"email\": \"Sammy6Tester@proctoru.com\",\n\"student_id\": \"1123\",\n\"country\":\"US\",\n\"phone\":\"205-444-5555\",\n\"extra_time\": \"15\",\n\"schedule_id\": \"{{schedule_id1}}\"\n},\n{\n\"first_name\": \"Test\",\n\"last_name\": \"Taker2\",\n\"email\": \"Sandra1Quizzer@proctoru.com\",\n\"student_id\": \"678906\",\n\"country\":\"US\",\n\"phone\":\"205-333-6666\",\n\"schedule_id\": \"{{schedule_id2}}\"\n}\n]\n}"
								},
								"url": "{{URL}}/batch/scheduling"
							},
							"response": []
						},
						{
							"name": "Cirrus Schedule with no hierarchy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"",
											"// Creates initial time when request sent",
											"",
											"var moment = require('moment')",
											"var time = moment()",
											"var random_int = _.random(1, 3)",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set('randomStartFuture', RandomStartFuture);",
											"pm.environment.set('randomEndFuture', RandomEndFuture);",
											"",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))",
											"// Current Time",
											"",
											"pm.environment.set('currentDate', moment(time, \"YYYY-MM-DD\"));",
											"",
											"pm.environment.set('currentTimeISO', time.toISOString());",
											"",
											"pm.environment.set(\"random_number\", _.random(7, 5));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let jsonData, url;",
											"try {",
											"    jsonData = pm.response.json();",
											"    url = jsonData.url;",
											"} catch (e) {",
											"    console.log(\"HTML was found! Error\");",
											"    throw new Error(\"HTML was found! Error\");",
											"}",
											"",
											"if (!url) {",
											"    console.log(\"var url was blank. fix it\");",
											"    throw new Error(\"var url was blank. fix it\");",
											"}",
											"",
											"pm.test(\"@C1396115 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"const validateCreation = () => new Promise((resolve, reject) => {",
											"    setTimeout(() => {",
											"        pm.sendRequest({",
											"            url: url,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"            }",
											"        }, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"",
											"            const contentType = res.headers.get('Content-Type');",
											"            if (contentType && contentType.includes('text/html')) {",
											"                console.log(\"HTML was found! Error\");",
											"                return reject(new Error(\"HTML was found! Error\"));",
											"            }",
											"",
											"            let responseJson;",
											"            try {",
											"                responseJson = res.json();",
											"            } catch (e) {",
											"                console.error(\"Failed to parse response body as JSON\");",
											"                return reject(new Error(\"Failed to parse response body as JSON\"));",
											"            }",
											"",
											"            if (responseJson.data.status === 'processing' || responseJson.data.status === 'pending') {",
											"                console.log('validating creation again in 5 seconds');",
											"                resolve(validateCreation());",
											"            } else {",
											"                resolve(res);",
											"            }",
											"        });",
											"    }, 10000); // Wait for 3 seconds before the next request",
											"});",
											"",
											"validateCreation().then(res => {",
											"    pm.test(\"GET request contains successful booking\", () => {",
											"        console.log(res.json().data.status);",
											"        pm.expect(res.json().data.status).to.eql('success');",
											"    });",
											"}).catch(error => {",
											"    console.error(error.message);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{cirrus-key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"exam\": {\n\"description\": \"Batch Scheduling Example_11111\",\n\"start_date\": \"{{RandomStartFuture}}\",\n\"end_date\": \"{{RandomEndFuture}}\",\n\"duration\": 30,\n\"external_id\": \"{{external_id}}\",\n\"course_id\": \"course1234\",\n\"test_delivery_id\": \"5050\",\n\"notify\":\"N\"\n},\n\"test_takers\": [\n{\n\"first_name\": \"Sandra1\",\n\"last_name\": \"Quizzer\",\n\"email\": \"Sammy6Tester@proctoru.com\",\n\"student_id\": \"123456\",\n\"country\":\"US\",\n\"phone\":\"205-444-5555\",\n\"extra_time\": \"15\",\n\"schedule_id\": \"{{schedule_id1}}\"\n},\n{\n\"first_name\": \"Test\",\n\"last_name\": \"Taker2\",\n\"email\": \"Sandra1Quizzer@proctoru.com\",\n\"student_id\": \"678906\",\n\"country\":\"US\",\n\"phone\":\"205-333-6666\",\n\"schedule_id\": \"{{schedule_id2}}\"\n}\n]\n}"
								},
								"url": "{{URL}}/batch/scheduling"
							},
							"response": []
						},
						{
							"name": "Cirrus Schedule with incorrect hierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let jsonData, url;",
											"try {",
											"    jsonData = pm.response.json();",
											"    url = jsonData.url;",
											"} catch (e) {",
											"    console.log(\"HTML was found! Error\");",
											"    throw new Error(\"HTML was found! Error\");",
											"}",
											"",
											"if (!url) {",
											"    console.log(\"var url was blank. fix it\");",
											"    throw new Error(\"var url was blank. fix it\");",
											"}",
											"",
											"pm.test(\"@C1396116 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"const validateCreation = () => new Promise((resolve, reject) => {",
											"    setTimeout(() => {",
											"        pm.sendRequest({",
											"            url: url,",
											"            method: 'GET',",
											"            header: {",
											"                'content-type': 'application/json',",
											"                'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"            }",
											"        }, (err, res) => {",
											"            if (err) {",
											"                return reject(err);",
											"            }",
											"",
											"            const contentType = res.headers.get('Content-Type');",
											"            if (contentType && contentType.includes('text/html')) {",
											"                console.log(\"HTML was found! Error\");",
											"                return reject(new Error(\"HTML was found! Error\"));",
											"            }",
											"",
											"            let responseJson;",
											"            try {",
											"                responseJson = res.json();",
											"            } catch (e) {",
											"                console.error(\"Failed to parse response body as JSON\");",
											"                return reject(new Error(\"Failed to parse response body as JSON\"));",
											"            }",
											"",
											"            if (responseJson.data.status === 'processing' || responseJson.data.status === 'pending') {",
											"                console.log('validating creation again in 5 seconds');",
											"                resolve(validateCreation());",
											"            } else {",
											"                resolve(res);",
											"            }",
											"        });",
											"    }, 10000); // Wait for 3 seconds before the next request",
											"});",
											"",
											"validateCreation().then(res => {",
											"    pm.test(\"GET request contains successful booking\", () => {",
											"        console.log(res.json().data.status);",
											"        pm.expect(res.json().data.status).to.eql('success');",
											"    });",
											"}).catch(error => {",
											"    console.error(error.message);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"      var moment = require('moment')",
											"var time = moment()",
											"var randomDate = moment().add(_.random(7, 1000), \"day\").seconds(0).format(\"YYYY-MM-DD\");",
											"var fiveMin = moment(time).add(5, 'minutes').startOf('minute').toISOString();",
											"var thirtyMin = moment(time).add(30, 'minutes').startOf('minute').toISOString();",
											"var minfiveMin = moment(time).add(5, 'minutes').startOf('minute').format('m');",
											"var nearestFive = Math.round(minfiveMin/5)*5;",
											"var futureStartTime = moment(fiveMin).startOf('hour').add(nearestFive, 'minutes').toISOString();",
											"var futureEndTime = moment(thirtyMin).startOf('hour').add(nearestFive, 'minutes').toISOString();",
											"pm.environment.set('futureStartTime', futureStartTime);",
											"pm.environment.set('futureEndTime', futureEndTime);",
											"",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{cirrus-key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"exam\": {\n\"description\": \"Batch Scheduling Example_11111\",\n\"start_date\": \"{{RandomStartFuture}}\",\n\"end_date\": \"{{RandomEndFuture}}\",\n\"duration\": 30,\n\"external_id\": \"{{external_id}}\",\n\"course_id\": \"course1234\",\n\"test_delivery_id\": \"5050\",\n\"notify\":\"N\",\n\"hierarchy\": \"TEST\" // hierarchy isn't real\n},\n\"test_takers\": [\n{\n\"first_name\": \"Sandra1\",\n\"last_name\": \"Quizzer\",\n\"email\": \"Sammy6Tester@proctoru.com\",\n\"student_id\": \"123456\",\n\"country\":\"US\",\n\"phone\":\"205-444-5555\",\n\"extra_time\": \"15\",\n\"schedule_id\": \"{{schedule_id1}}\"\n},\n{\n\"first_name\": \"Test\",\n\"last_name\": \"Taker2\",\n\"email\": \"Sandra1Quizzer@proctoru.com\",\n\"student_id\": \"678906\",\n\"country\":\"US\",\n\"phone\":\"205-333-6666\",\n\"schedule_id\": \"{{schedule_id2}}\"\n}\n]\n}"
								},
								"url": "{{URL}}/batch/scheduling"
							},
							"response": []
						}
					]
				},
				{
					"name": "DEV-2896 Batch Scheduling w/ Notes",
					"item": [
						{
							"name": "Batch Schedule w/ Notes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"@C1396102 Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"@C1396103 Response is correct\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var url = jsonData.url;",
											"",
											"pm.test(\"@C1396101 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"const validateCreation = () => new Promise((resolve, reject) => {",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'content-type': 'application/json',",
											"            'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"        }",
											"    }, (err, res) => {",
											"        if (err) {",
											"            return reject(err);",
											"        }",
											"        if (res.json().data.status === 'processing' || res.json().data.status === 'pending') {",
											"            // Sleep for 10 seconds",
											"            setTimeout(() => {",
											"                validateCreation().then(resolve).catch(reject);",
											"            }, 10000); // 10 seconds",
											"        } else {",
											"            resolve(res);",
											"        }",
											"    });",
											"});",
											"",
											"const getInstitutionExamList = () => new Promise((resolve, reject) => {",
											"    const requestUrl = pm.environment.get('URL') + '/getInstitutionExamList/?time_sent=' + pm.environment.get('currentTime');",
											"    pm.sendRequest({",
											"        url: requestUrl,",
											"        method: 'GET',",
											"        header: {",
											"            'content-type': 'application/json',",
											"            'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"        }",
											"    }, (err, res) => {",
											"        if (err) {",
											"            return reject(err);",
											"        }",
											"        resolve(res);",
											"    });",
											"});",
											"",
											"validateCreation().then(res => {",
											"    pm.test(\"GET request contains successful booking\", () => {",
											"        pm.expect(res.json().data.status).to.eql('success');",
											"    });",
											"    return getInstitutionExamList();",
											"}).then(res => {",
											"    const exam = res.json().data.find(ex => ex.exam_id == pm.environment.get('external_id'));",
											"    pm.test(\"Exam Exists\", () => {",
											"        // Verify scheduled exam exists in returned list",
											"        pm.expect(!!exam).to.be.true;",
											"    });",
											"    pm.test(\"Notes Are Updated\", () => {",
											"        pm.expect(exam.notes).to.eql('<h1>UPDATED Notes_' + pm.environment.get('random_number') + '</h1>');",
											"    });",
											"    // Log exam details to console for manual verification",
											"    console.log('Scheduled Exam:', exam);",
											"}).catch(err => {",
											"    console.error(err);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"notes\": \"<h1>UPDATED Notes_{{random_number}}</h1>\",\r\n        \"start_date\": \"{{RandomStartFuture}}\",\r\n        \"end_date\": \"{{RandomEndFuture}}\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"{{external_id}}\",\r\n        \"course_id\": \"course123421\",\r\n        \"test_delivery_id\": \"5051\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n        \"first_name\": \"Sammy1\",\r\n        \"last_name\": \"Tester1\",\r\n        \"email\": \"sammytester@proctoru.com\",\r\n        \"student_id\": \"1234561\",\r\n        \"country\":\"US\",\r\n        \"phone\":\"205-444-5555\",\r\n        \"extra_time\": \"15\",\r\n        \"schedule_id\": \"{{schedule_id1}}\"\r\n        },\r\n        {\r\n        \"first_name\": \"Sandra1\",\r\n        \"last_name\": \"Quizze1\",\r\n        \"email\": \"sandraquizzer@proctoru.com\",\r\n        \"student_id\": \"678906\",\r\n        \"country\":\"US\",\r\n        \"phone\":\"205-333-6666\",\r\n        \"schedule_id\": \"{{schedule_id2}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/batch/scheduling",
								"description": "fake/other institution's department"
							},
							"response": [
								{
									"name": "Batch Schedule Example ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"2020-10-14 17:45\",\r\n        \"end_date\": \"2021-04-19 20:45\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"654314\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"258381\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"258388\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/batch/scheduling"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Aug 2020 21:15:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "Fri, 01 Jan 1990 00:00:00 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"5e3ea682fb4de44b2718a7f26b53923e\""
										},
										{
											"key": "X-Request-Id",
											"value": "Root1-5f3c44f2-cbff9b97d03ac96c7a60f2a8"
										},
										{
											"key": "X-Runtime",
											"value": "0.067098"
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "cf-request-id",
											"value": "04a50669770000f33126363200000001"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "5c4ea688b94bf331-ATL"
										}
									],
									"cookie": [],
									"body": "{\n    \"url\": \"https://go.proctoru.com/api/batch/scheduling/26b2c863-5ada-4480-89a1-7b832fa634a7\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "DEV-3651 Use window in request for batch scheduling",
					"item": [
						{
							"name": "batchScheduleGoodDates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var url = jsonData.url;",
											"",
											"pm.test(\"@C1396117 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"var validateCreation = () => new Promise((resolve, reject) => {",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'content-type': 'application/json',",
											"            'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"        }",
											"    }, (err, res) => {",
											"        if (err) {",
											"            return reject(err);",
											"        }",
											"        if (res.json().data.status === 'processing' || res.json().data.status === 'pending') {",
											"            // Sleep for 10 seconds",
											"            setTimeout(() => {",
											"                console.log('validating creation again');",
											"                resolve(validateCreation()); // Recursive call after delay",
											"            }, 10000); // 10 seconds",
											"        } else {",
											"            resolve(res);",
											"        }",
											"    });",
											"});",
											"",
											"validateCreation().then(res => {",
											"    pm.test(\"GET request contains successful booking\", () => {",
											"        console.log(res.json().data.status);",
											"        pm.expect(res.json().data.status).to.eql('success');",
											"    });",
											"}).catch(err => {",
											"    console.error(err);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"{{RandomStartFuture}}\",\r\n        \"end_date\": \"{{RandomEndFuture}}\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"{{random_number}}\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"{{schedule_id1}}\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"{{schedule_id2}}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/batch/scheduling",
								"description": "This resource is used to schedule and register multiple students for a single exam with the ease of one API call. \n<br>To view the current status of the scheduling job created from this request, poll the URL given in the response using our 'pollBatchSchedule' request."
							},
							"response": [
								{
									"name": "Batch Schedule Example ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"2020-10-14 17:45\",\r\n        \"end_date\": \"2021-04-19 20:45\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"654314\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"258381\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"258388\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/batch/scheduling"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Aug 2020 21:15:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "Fri, 01 Jan 1990 00:00:00 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"5e3ea682fb4de44b2718a7f26b53923e\""
										},
										{
											"key": "X-Request-Id",
											"value": "Root1-5f3c44f2-cbff9b97d03ac96c7a60f2a8"
										},
										{
											"key": "X-Runtime",
											"value": "0.067098"
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "cf-request-id",
											"value": "04a50669770000f33126363200000001"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "5c4ea688b94bf331-ATL"
										}
									],
									"cookie": [],
									"body": "{\n    \"url\": \"https://go.proctoru.com/api/batch/scheduling/26b2c863-5ada-4480-89a1-7b832fa634a7\"\n}"
								}
							]
						},
						{
							"name": "batchScheduleBadDates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set(\"random_number\", _.random(1000000, 9999999))",
											"var moment = require('moment')",
											"var random_int = _.random(1, 3)",
											"",
											"var RandomStartFuture = moment().add(random_int, \"week\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"var RandomEndFuture = moment().add(random_int, \"month\").seconds(0).format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"",
											"pm.environment.set(\"student_id\", _.random(1000000, 9999999))",
											"pm.environment.set('RandomStartFuture', RandomStartFuture);",
											"pm.environment.set('RandomEndFuture', RandomEndFuture);",
											"",
											"",
											"pm.environment.set(\"reservation_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"external_id\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id1\", _.random(100000000, 999999999))",
											"pm.environment.set(\"schedule_id2\", _.random(100000000, 999999999))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var url = jsonData.url;",
											"",
											"pm.test(\"@C1396118 Response contains batch scheduling URL\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"https://staging.proctoru.com/api/batch/scheduling/\");",
											"});",
											"",
											"var validateCreation = () => new Promise((resolve, reject) => {",
											"    pm.sendRequest({",
											"        url: url,",
											"        method: 'GET',",
											"        header: {",
											"            'content-type': 'application/json',",
											"            'Authorization-Token': pm.environment.get(\"api-inst-token\")",
											"        }",
											"    }, (err, res) => {",
											"        if (err) {",
											"            return reject(err);",
											"        }",
											"        if (res.json().data.status === 'processing' || res.json().data.status === 'pending') {",
											"            // Sleep for 10 seconds",
											"            setTimeout(() => {",
											"                console.log('validating creation again');",
											"                resolve(validateCreation()); // Recursive call after delay",
											"            }, 10000); // 10 seconds",
											"        } else {",
											"            resolve(res);",
											"        }",
											"    });",
											"});",
											"",
											"validateCreation().then(res => {",
											"    pm.test(\"GET request contains successful booking\", () => {",
											"        console.log(res.json().data.status);",
											"        pm.expect(res.json().data.status).to.eql('success');",
											"    });",
											"}).catch(err => {",
											"    console.error(err);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{api-inst-token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"{{RandomEndFuture}}\",\r\n        \"end_date\": \"{{RandomStartFuture}}\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"{{external_id}}\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"{{schedule_id1}}\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"{{schedule_id2}}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{URL}}/batch/scheduling",
								"description": "This resource is used to schedule and register multiple students for a single exam with the ease of one API call. \n<br>To view the current status of the scheduling job created from this request, poll the URL given in the response using our 'pollBatchSchedule' request."
							},
							"response": [
								{
									"name": "Batch Schedule Example ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"exam\": {\r\n        \"description\": \"Batch Scheduling Example\",\r\n        \"start_date\": \"2020-10-14 17:45\",\r\n        \"end_date\": \"2021-04-19 20:45\",\r\n        \"duration\": 60,\r\n        \"external_id\": \"654314\",\r\n        \"course_id\": \"course123456\",\r\n        \"test_delivery_id\": \"5053\",\r\n        \"notify\":\"N\"\r\n    },\r\n    \"test_takers\": [\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Tester\",\r\n            \"email\": \"DemoTester12@proctoru.com\",\r\n            \"student_id\": \"12345678\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-444-5555\",\r\n            \"extra_time\": \"15\",\r\n            \"schedule_id\": \"258381\"\r\n        },\r\n        {\r\n            \"first_name\": \"Demo\",\r\n            \"last_name\": \"Quizzer\",\r\n            \"email\": \"DemoQuizzer12@proctoru.com\",\r\n            \"student_id\": \"67899\",\r\n            \"country\":\"US\",\r\n            \"phone\":\"205-333-6666\",\r\n            \"schedule_id\": \"258388\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{URL}}/batch/scheduling"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Aug 2020 21:15:30 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "ALLOWALL"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "Fri, 01 Jan 1990 00:00:00 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"5e3ea682fb4de44b2718a7f26b53923e\""
										},
										{
											"key": "X-Request-Id",
											"value": "Root1-5f3c44f2-cbff9b97d03ac96c7a60f2a8"
										},
										{
											"key": "X-Runtime",
											"value": "0.067098"
										},
										{
											"key": "X-Rack-Cache",
											"value": "invalidate, pass"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "cf-request-id",
											"value": "04a50669770000f33126363200000001"
										},
										{
											"key": "Expect-CT",
											"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "5c4ea688b94bf331-ATL"
										}
									],
									"cookie": [],
									"body": "{\n    \"url\": \"https://go.proctoru.com/api/batch/scheduling/26b2c863-5ada-4480-89a1-7b832fa634a7\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "DEV-4120 - removeReservation",
					"item": [
						{
							"name": "getStudentReservationList Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var time = new Date().toISOString();",
											"postman.setEnvironmentVariable(\"currentTime\", time);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"@C1396247 Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"@C1396248 Response contains reservation_no\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"reservation_no\");",
											"});",
											"pm.test(\"@C1396249 Response contains start_date\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"start_date\");",
											"});",
											"",
											"let responseData = pm.response.json();",
											"console.log(responseData)",
											"pm.environment.set(\"reservationNo\", responseData.data[0].reservation_no);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{API-Key}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"url": {
									"raw": "{{URL}}/getStudentReservationList/?time_sent={{currentTime}}&student_id={{studentID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"getStudentReservationList",
										""
									],
									"query": [
										{
											"key": "time_sent",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ"
										},
										{
											"key": "student_id",
											"value": "{{studentID}}",
											"description": "<p><strong>(required)</strong></p>Institution's unique test-taker ID"
										}
									]
								},
								"description": "This resource returns the list of active reservations for a single test-taker."
							},
							"response": [
								{
									"name": "getStudentReservationList",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"url": {
											"raw": "{{URL}}/getStudentReservationList/?time_sent={{currentTime}}&student_id={{studentID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"getStudentReservationList",
												""
											],
											"query": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"description": "<p><strong>(required)</strong></p>Institution's unique test-taker ID"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": "{\n    \"time_sent\": \"2020-05-14T20:37:28Z\",\n    \"response_code\": 1,\n    \"message\": \"\",\n    \"data\": [\n        {\n            \"reservation_no\": 908125464,\n            \"reservation_id\": \"2020-05-14T20:40:00Z\",\n            \"exam_id\": \"123-2341324\",\n            \"description\": \"Final- MATH 101\",\n            \"courseno\": \"MATH 101\",\n            \"instructor\": \"John Doe\",\n            \"start_date\": \"2020-05-14T20:50:00Z\",\n            \"test\": \"Final - MATH 101\",\n            \"escalated\": false\n        }\n        ]\n    }"
								}
							]
						},
						{
							"name": "removeReservation Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var time = new Date().toISOString();",
											"postman.setEnvironmentVariable(\"currentTime\", time);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"@C1396250 Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"@C1396251 Response contains message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"pm.test(\"@C1396252 Response contains onaccount\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"onaccount\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Token",
										"value": "{{API-Key}}",
										"description": "ProctorU's provided API key used for authentication"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "time_sent",
											"value": "{{currentTime}}",
											"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
											"type": "text"
										},
										{
											"key": "student_id",
											"value": "{{studentID}}",
											"description": "<p><strong>(required)</strong></p> Institution's unique test-taker ID  ",
											"type": "text"
										},
										{
											"key": "reservation_no",
											"value": "{{reservationNo}}",
											"description": "<p><strong>(required)</strong></p> ProctorU's unique reservation ID",
											"type": "text"
										},
										{
											"key": "explanation",
											"value": "Had a conflicting appointment;",
											"description": "Reason for cancellation",
											"type": "text"
										}
									]
								},
								"url": "{{URL}}/removeReservation/",
								"description": "Removes a reservation from the schedule."
							},
							"response": [
								{
									"name": "removeReservation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization-Token",
												"value": "{{API-Key}}",
												"description": "ProctorU's provided API key used for authentication"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "time_sent",
													"value": "{{currentTime}}",
													"description": "<p><strong>(required)</strong></p>Timestamp that should be sent within two minutes of the current time. \n<br>\n<br><strong>Type:</strong>  ISO8601 DateTime In UTC \n<br><strong>Format:</strong>YYYY-MM-DDTHH24:MI:SSZ",
													"type": "text"
												},
												{
													"key": "student_id",
													"value": "{{studentID}}",
													"description": "<p><strong>(required)</strong></p> Institution's unique test-taker ID  ",
													"type": "text"
												},
												{
													"key": "reservation_no",
													"value": "",
													"description": "<p><strong>(required)</strong></p> ProctorU's unique reservation ID",
													"type": "text"
												},
												{
													"key": "explanation",
													"value": "Had a conflicting appointment;",
													"description": "Reason for cancellation",
													"type": "text"
												}
											]
										},
										"url": "{{URL}}/removeReservation/"
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": "{\n    \"time_sent\": \"2020-05-14T20:29:41Z\",\n    \"response_code\": 1,\n    \"message\": \"\",\n    \"data\": {\n        \"onaccount\": \"0.00\"\n        }\n    }"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getInstitutionExamList",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization-Token",
						"value": "{{api-inst-token}}"
					}
				],
				"url": {
					"raw": "{{URL}}/getInstitutionExamList/?time_sent={{currentTime}}&all=Y",
					"host": [
						"{{URL}}"
					],
					"path": [
						"getInstitutionExamList",
						""
					],
					"query": [
						{
							"key": "time_sent",
							"value": "{{currentTime}}"
						},
						{
							"key": "term_id",
							"value": "176255",
							"disabled": true
						},
						{
							"key": "term_no",
							"value": "176225",
							"disabled": true
						},
						{
							"key": "all",
							"value": "Y"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var time = new Date().toISOString();",
					"postman.setEnvironmentVariable(\"currentTime\", time);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}